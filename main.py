from bs4 import BeautifulSoup
import telebot
from telebot import types
import sqlite3
import time
import requests
import random

bot = telebot.TeleBot('5812525194:AAHEfg_WfkIEp-Q6c3N2ZSy4qpFqtvbpi30')

conn = sqlite3.connect('planner.sql')
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS tasks
                  (user_id INTEGER,
                  id INTEGER PRIMARY KEY,
                  task TEXT,
                  completed INTEGER DEFAULT 0)''')
conn.commit()
cursor.close()
conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}!</b>', parse_mode='html')
    if check_subscription(message.chat.id):
        bot.send_message(message.chat.id, '<i>–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º</i>!\n'
                                          '<i>–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–≤–æ–∏—Ö –¥–µ–ª!</i>\n\n'
                                          '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–π–¥–∏ –≤ –º–µ–Ω—é /menu\n'
                                          '–ù–µ –∑–Ω–∞–µ—à—å –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å? –ü–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É /about', parse_mode='html')
    else:
        bot.send_message(message.chat.id, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @RICHMAN_Channel.\n"
                                          "–ó–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")

    while True:
        scheduled_time_voice = "21:00"
        scheduled_time_image = "14:00"
        scheduled_time_text = "7:00"
        if time.strftime('%H:%M') == scheduled_time_voice:
            i = random.randint(1, 120)
            audio_file = open(f'voices/{i}.ogg', 'rb')
            bot.send_audio(message.chat.id, audio=audio_file)
        if time.strftime('%H:%M') == scheduled_time_image:
            response = requests.get('https://coolsen.ru/200-motiviruyushhih-kartinok-u-tebya-vse-poluchitsya/')
            soup = BeautifulSoup(response.text, 'html.parser')
            images = soup.find_all('img')
            image = random.choice(images)['src']
            bot.send_photo(message.chat.id, image)
        if time.strftime('%H:%M') == scheduled_time_text:
            bot.send_message(message.chat.id, '<i>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü–æ—Ä–∞ —Ä–∞—Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å)</i>', parse_mode='html')
        time.sleep(60)


def check_subscription(chat_id):
    try:
        chat_member = bot.get_chat_member('@RICHMAN_Channel', chat_id)
        if chat_member.status == 'member' or chat_member.status == 'creator':
            return True
        else:
            return False
    except telebot.apihelper.ApiException as e:
        print(e)
        return False


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
@bot.message_handler(commands=['menu'])
def menu(message):
    bot.send_chat_action(message.chat.id, 'typing')
    if check_subscription(message.chat.id):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('üìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï')
        btn2 = types.KeyboardButton('üìö –ö–ù–ò–ì–ò')
        btn3 = types.KeyboardButton('üîñ –ß–ï–ö-–õ–ò–°–¢–´')
        btn4 = types.KeyboardButton('–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –¥—Ä—É–∑—å—è–º')
        markup.row(btn1)
        markup.row(btn2, btn3)
        markup.row(btn4)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @RICHMAN_Channel\n"
                                          "–ó–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")


# –í—ã–∑–æ–≤ –º–µ–Ω—é –†–∞—Å–ø–∏—Å–∞–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == 'üìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï')
def callback_message_rs(message):
    bot.send_chat_action(message.chat.id, 'typing')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ó–∞–¥–∞—á–∏ üìã')
    btn2 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –ó–∞–¥–∞—á—É ‚ûï')
    btn3 = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –ó–∞–¥–∞—á—É ‚ûñ')
    btn4 = types.KeyboardButton('–í—ã–ø–æ–ª–Ω–∏—Ç—å –ó–∞–¥–∞—á—É ‚úÖ')
    btn5 = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ ‚ùå')
    btn6 = types.KeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è')
    markup.row(btn1)
    markup.row(btn2, btn3)
    markup.row(btn4, btn5)
    markup.row(btn6)

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ', reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
@bot.message_handler(func=lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ó–∞–¥–∞—á–∏ üìã')
def callback_check_list(message):
    bot.send_chat_action(message.chat.id, 'typing')
    conn_list = sqlite3.connect('planner.sql')
    cursor_list = conn_list.cursor()
    user_id = message.chat.id
    cursor_list.execute("SELECT * FROM tasks WHERE user_id=?", (user_id,))
    tasks = cursor_list.fetchall()

    if not tasks:
        bot.send_message(message.chat.id, '<i>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç</i>', parse_mode='html')
    else:
        bot.send_message(message.chat.id, '<i>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏</i>', parse_mode='html')
        task_list = ''
        for task in tasks:
            task_id_list, task_text_list, completed_list = task[1:]  # –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è 4 –∑–Ω–∞—á–µ–Ω–∏—è, –∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è 3
            status = '‚úÖ' if completed_list else '‚ùå'
            task_list += f'{task_id_list}. {task_text_list} {status}\n'

        bot.send_message(message.chat.id, task_list)

    conn_list.commit()
    cursor_list.close()
    conn_list.close()


@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –ó–∞–¥–∞—á—É ‚ûï')
def callback_add_task(message):
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, '<i>–í–≤–µ–¥–∏ –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–æ–º–µ—Ä.–∑–∞–¥–∞—á–∞</i>', parse_mode='html')

    bot.register_next_step_handler(message, text_add)


def text_add(anymessage):
    try:
        bot.send_chat_action(anymessage.chat.id, 'typing')
        conn_add = sqlite3.connect('planner.sql')
        cursor_add = conn_add.cursor()
        id_add = anymessage.text.split('.')[0]
        user_id = anymessage.chat.id

        cursor_add.execute("SELECT * FROM tasks WHERE user_id=? AND id=?", (user_id, id_add))
        existing_task = cursor_add.fetchone()

        if existing_task:
            bot.send_message(anymessage.chat.id, '<i>–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</i>\n'
                                                 '<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.</i>', parse_mode='html')
        else:
            if int(id_add) <= 0 or str():
                bot.send_message(anymessage.chat.id, '<i>–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</i>\n'
                                                     '<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.</i>', parse_mode='html')
            else:
                task_add = anymessage.text.split('.')[1].strip()
                cursor_add.execute("INSERT INTO tasks (user_id, id, task) VALUES (?, ?, ?)",
                                   (user_id, id_add, task_add))
                conn_add.commit()

                bot.send_message(anymessage.chat.id, '<i>–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫.</i>', parse_mode='html')

        cursor_add.close()
        conn_add.close()
    except ValueError:
        bot.send_message(anymessage.chat.id, '<i>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</i>\n'
                                             '<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.</i>', parse_mode='html')
    finally:
        callback_message_rs(anymessage)


@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –ó–∞–¥–∞—á—É ‚ûñ')
def callback_remove_task(message):
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, '<i>–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:</i>', parse_mode='html')

    bot.register_next_step_handler(message, text_rem)


def text_rem(difmessage):
    bot.send_chat_action(difmessage.chat.id, 'typing')
    try:
        conn_remove = sqlite3.connect('planner.sql')
        cursor_remove = conn_remove.cursor()
        task_id_delete = difmessage.text
        user_id = difmessage.chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–¥–∞—á–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
        cursor_remove.execute("SELECT * FROM tasks WHERE user_id=? AND id=?", (user_id, task_id_delete))
        existing_task = cursor_remove.fetchone()

        if existing_task:
            cursor_remove.execute("DELETE FROM tasks WHERE user_id=? AND id=?", (user_id, task_id_delete))
            conn_remove.commit()
            bot.send_message(difmessage.chat.id, '<i>–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.</i>', parse_mode='html')
        else:
            bot.send_message(difmessage.chat.id, '<i>–¢–∞–∫–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</i>\n'
                                                 '<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.</i>', parse_mode='html')

        cursor_remove.close()
        conn_remove.close()

    finally:
        callback_message_rs(difmessage)


@bot.message_handler(func=lambda message: message.text == '–í—ã–ø–æ–ª–Ω–∏—Ç—å –ó–∞–¥–∞—á—É ‚úÖ')
def callback_complete_task(message):
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, '<i>–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é:</i>',
                     parse_mode='html')

    bot.register_next_step_handler(message, text_complete)


def text_complete(onemessage):
    bot.send_chat_action(onemessage.chat.id, 'typing')
    conn_complete = sqlite3.connect('planner.sql')
    cursor_complete = conn_complete.cursor()
    task_id = onemessage.text
    user_id = onemessage.chat.id

    cursor_complete.execute("SELECT * FROM tasks WHERE user_id=? AND id=?", (user_id, task_id))
    existing_task = cursor_complete.fetchone()

    if existing_task:
        cursor_complete.execute("UPDATE tasks SET completed=1 WHERE user_id=? AND id=?", (user_id, task_id))
        conn_complete.commit()
        bot.send_message(onemessage.chat.id, '<i>–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.</i>', parse_mode='html')
    else:
        bot.send_message(onemessage.chat.id, '<i>–¢–∞–∫–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</i>\n'
                                             '<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.</i>', parse_mode='html')

    cursor_complete.close()
    conn_complete.close()

    callback_message_rs(onemessage)


@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ ‚ùå')
def callback_delete_all_task(message):
    bot.send_chat_action(message.chat.id, 'typing')
    conn_delete = sqlite3.connect('planner.sql')
    cursor_delete = conn_delete.cursor()
    user_id = message.chat.id
    cursor_delete.execute("DELETE FROM tasks WHERE user_id=?", (user_id,))
    conn_delete.commit()
    cursor_delete.close()
    conn_delete.close()

    bot.send_message(message.chat.id, '<i>–í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã</i>', parse_mode='html')


@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥ ‚Ü©Ô∏è')
def callback_back(message):
    menu(message)


# –í—ã–∑–æ–≤ –∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ö–Ω–∏–≥
@bot.message_handler(func=lambda message: message.text == 'üìö –ö–ù–ò–ì–ò')
def callback_message_books(message):
    bot.send_chat_action(message.chat.id, 'upload_photo')
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–°–∫–∞—á–∞—Ç—å —Å –Ø–Ω–¥–µ–∫—Å –¥–∏—Å–∫üìÄ', url='https://disk.yandex.com.am/d/g4bAG-UUA03wkw'))
    markup.add(types.InlineKeyboardButton('–°–∫–∞—á–∞—Ç—å —Å –ì—É–≥–ª –¥–∏—Å–∫üíø', url='https://drive.google.com/drive/folders'
                                                                      '/13eAWUd8ZaWuRn3NtVRKu8eIqL52r8_Bf'))

    file = open('photo/books.jpg', 'rb')
    bot.send_photo(message.chat.id, file, reply_markup=markup)


# –í—ã–∑–æ–≤ –ß–µ–∫-–ª–∏—Å—Ç–æ–≤
@bot.message_handler(func=lambda message: message.text == 'üîñ –ß–ï–ö-–õ–ò–°–¢–´')
def callback_message_lists(message):
    bot.send_chat_action(message.chat.id, 'typing')
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç', callback_data='intel'))
    markup.add(types.InlineKeyboardButton('üí¨ –ú–∞—Å—Ç–µ—Ä –û–±—â–µ–Ω–∏—è', callback_data='com'))
    markup.add(types.InlineKeyboardButton('üòé –•–∞—Ä–∏–∑–º–∞', callback_data='xar'))
    markup.add(types.InlineKeyboardButton('üé• 5 –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏—Ö —Ñ–∏–ª—å–º–æ–≤', callback_data='films'))
    markup.add(types.InlineKeyboardButton('üëî –í–æ–ª—à–µ–±–Ω–∞—è –æ–¥–µ–∂–¥–∞', callback_data='clothes'))

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ß–µ–∫-–õ–∏—Å—Ç–æ–≤!', reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ß–µ–∫-–ª–∏—Å—Ç–æ–≤
@bot.callback_query_handler(func=lambda callback: callback.data == 'intel')
def one(callback):
    bot.send_chat_action(callback.message.chat.id, 'upload_document')
    file = open('cheks/intel.pdf', 'rb')
    bot.send_document(callback.message.chat.id, file, caption='–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: –∫–∞–∫ —Å—Ç–∞—Ç—å —É–º–Ω–µ–µ? \n\n'
                                                              'üìå –ù–µ –∑–∞–±—É–¥—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–º —Å –¥—Ä—É–≥–æ–º.')


@bot.callback_query_handler(func=lambda callback: callback.data == 'com')
def two(callback):
    bot.send_chat_action(callback.message.chat.id, 'upload_document')
    file = open('cheks/com.pdf', 'rb')
    bot.send_document(callback.message.chat.id, file, caption='üí¨ –ú–∞—Å—Ç–µ—Ä –û–±—â–µ–Ω–∏—è\n\n'
                                                              'üìå–ù–µ –∑–∞–±—É–¥—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–º —Å –¥—Ä—É–≥–æ–º.')


@bot.callback_query_handler(func=lambda callback: callback.data == 'xar')
def three(callback):
    bot.send_chat_action(callback.message.chat.id, 'upload_document')
    file = open('cheks/xar.pdf', 'rb')
    bot.send_document(callback.message.chat.id, file, caption='üòé –•–∞—Ä–∏–∑–º–∞ –∫–∞–∫ —É –¢–æ–º–∞—Å–∞ –®–µ–ª–±–∏\n\n'
                                                              'üìå –ù–µ –∑–∞–±—É–¥—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–º —Å –¥—Ä—É–≥–æ–º.')


@bot.callback_query_handler(func=lambda callback: callback.data == 'films')
def three(callback):
    bot.send_chat_action(callback.message.chat.id, 'upload_document')
    file = open('cheks/films.pdf', 'rb')
    bot.send_document(callback.message.chat.id, file, caption='üé• 5 –°–∞–º—ã—Ö –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏—Ö –§–∏–ª—å–º–æ–≤\n\n'
                                                              'üìå –ù–µ –∑–∞–±—É–¥—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–º —Å –¥—Ä—É–≥–æ–º.')


@bot.callback_query_handler(func=lambda callback: callback.data == 'clothes')
def three(callback):
    bot.send_chat_action(callback.message.chat.id, 'upload_document')
    file = open('cheks/clothes.pdf', 'rb')
    bot.send_document(callback.message.chat.id, file, caption='üëî –í–æ–ª—à–µ–±–Ω–∞—è –æ–¥–µ–∂–¥–∞\n\n'
                                                              'üìå –ù–µ –∑–∞–±—É–¥—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–º —Å –¥—Ä—É–≥–æ–º.')


@bot.message_handler(func=lambda message: message.text == '–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –¥—Ä—É–∑—å—è–º')
def callback_message_recomendation(message):
    pass


@bot.message_handler(commands=['about'])
def about(message):
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, '<strong>–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</strong>\n\n'
                                      '–ü—Ä–∏–≤–µ—Ç! –Ø - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –¥–µ–ª. '
                                      '–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å –∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏.\n\n'
                                      '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–æ –º–Ω–æ–π, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start.\n'
                                      '–ï—Å–ª–∏ —Ç—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª —Å–æ –º–Ω–æ–π —Ä–∞–Ω—å—à–µ, –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ —Å—Ä–∞–∑—É –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /menu.\n\n'
                                      '‚ùóÔ∏è<i>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @RICHMAN_Channel</i>.\n'
                                      '<i>–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏.</i>‚ùóÔ∏è\n\n'
                                      '–í –º–µ–Ω—é /menu —Ç—ã –Ω–∞–π–¥–µ—à—å —Å–ª–µ–¥—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã:\n'
                                      '–†–ê–°–ü–ò–°–ê–ù–ò–ï, –ö–ù–ò–ì–ò –∏ –ß–ï–ö-–õ–ò–°–¢–´.\n'
                                      '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏.\n\n'
                                      '- <strong>–†–ê–°–ü–ò–°–ê–ù–ò–ï</strong> –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å, –¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ –æ—Ç–º–µ—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ.\n'
                                      '–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ó–∞–¥–∞—á–∏ üìã".\n'
                                      '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –≤—ã–±–µ—Ä–∏ "–î–æ–±–∞–≤–∏—Ç—å –ó–∞–¥–∞—á—É ‚ûï" –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n'
                                      '–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É, –≤—ã–±–µ—Ä–∏ "–£–¥–∞–ª–∏—Ç—å –ó–∞–¥–∞—á—É ‚ûñ" –∏ –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.\n'
                                      '–ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é, –≤—ã–±–µ—Ä–∏ "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ó–∞–¥–∞—á—É ‚úÖ" –∏ –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.\n'
                                      '–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏, –≤—ã–±–µ—Ä–∏ "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ ‚ùå".\n\n'
                                      '- <strong>–ö–ù–ò–ì–ò</strong> –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –∫–Ω–∏–≥–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è.\n'
                                      '–ß—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –∫–Ω–∏–≥—É —Å –Ø–Ω–¥–µ–∫—Å –¥–∏—Å–∫–∞, –≤—ã–±–µ—Ä–∏ "–°–∫–∞—á–∞—Ç—å —Å –Ø–Ω–¥–µ–∫—Å –¥–∏—Å–∫üìÄ".\n'
                                      '–ß—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å —Å –ì—É–≥–ª –¥–∏—Å–∫–∞, –≤—ã–±–µ—Ä–∏ "–°–∫–∞—á–∞—Ç—å —Å –ì—É–≥–ª –¥–∏—Å–∫üíø".\n\n'
                                      '- <strong>–ß–ï–ö-–õ–ò–°–¢–´</strong> –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è.\n'
                                      '–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç, –≤—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é.\n\n'
                                      '–ü–æ–ª—å–∑—É–π—Å—è –±–æ—Ç–æ–º —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º!\n'
                                      '–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ @Richman_IT.\n\n'
                                      '<b><i>–£–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!</i></b>', parse_mode='html')


@bot.message_handler(commands=['help'])
def about(message):
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, '<i>–í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏: @Richman_IT.</i>\n'
                                      '<i>–£–¥–∞—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!</i>', parse_mode='html')


@bot.message_handler(content_types=['text'])
def get_random_text(message):
    bot.send_message(message.chat.id, '<i>–ò–∑–≤–∏–Ω–∏, –Ω–æ —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è,</i>\n'
                                      '<i>–ò—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.</i>\n\n'
                                      '<i>–ù–µ –∑–Ω–∞–µ—à—å –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞? –ù–∞–∂–∏–º–∞–π /help </i>', parse_mode='html')


bot.polling(none_stop=True)
